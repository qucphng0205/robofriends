{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","props","robotsInfor","robots","map","robot","key","username","SearchBox","searchChangeEvent","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","onSearchChange","event","setState","inputField","target","value","state","fetch","then","response","json","users","filterRobots","this","filter","toLowerCase","includes","color","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+MAeeA,G,MAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAC3B,OACC,yBAAKC,UAAU,gDACd,yBAAKC,IAAI,eAAeC,IAAG,+BAA0BH,EAA1B,cAC3B,6BACC,4BAAKF,GACL,2BAAIC,OCOOK,EAbE,SAACC,GACjB,IACIC,EADSD,EAAME,OACMC,KAAI,SAACC,GAC5B,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAMT,GAAIA,GAAIS,EAAMT,GAAIF,KAAMW,EAAMX,KAAMa,SAAUF,EAAME,SAAUZ,MAAOU,EAAMV,WAGrG,OACC,6BACEO,ICDWM,EARG,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,kBACnB,OACC,yBAAKZ,UAAU,OACd,2BAAOA,UAAU,mCAAmCa,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,MCK5FI,EARA,SAACZ,GACf,OACC,yBAAKa,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACnEhB,EAAMiB,WCoCKC,E,kDAlCd,aAAe,IAAD,8BACb,gBAaDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAACC,WAAYF,EAAMG,OAAOC,SAbxC,EAAKC,MAAQ,CACZvB,OAAQ,GACRoB,WAAY,IAJA,E,gEAQO,IAAD,OACnBI,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAACnB,OAAQ4B,S,+BAOhC,IAAD,OACJC,EAAeC,KAAKP,MAAMvB,OAAO+B,QAAO,SAAC7B,GAAD,OAC3CA,EAAMX,KAAKyC,cAAcC,SAAS,EAAKV,MAAMH,WAAWY,kBAEzD,OACC,yBAAKtC,UAAU,MACd,wBAAIiB,MAAO,CAACuB,MAAO,UAAnB,eACA,kBAAC,EAAD,CAAW5B,kBAAqBwB,KAAKb,iBACrC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUjB,OAAQ6B,U,GA7BLM,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAER,kBAAC,EAAD,MAECC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5eba21a8.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'tachyons'\r\n\r\nconst Card = ({name, email, id}) => {\r\n\treturn (\r\n\t\t<div className='bg-light-green dib br3 pa3 ma2 grow shadow-5'>\r\n\t\t\t<img alt='janeDoePhoto' src={`https://robohash.org/${id}?200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = (props) => {\r\n\tlet robots = props.robots;\r\n\tvar robotsInfor = robots.map((robot) => {\r\n\t\t\treturn <Card key={robot.id} id={robot.id} name={robot.name} username={robot.username} email={robot.email} />\r\n\t\t});\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{robotsInfor}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChangeEvent}) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='search robots' onChange={searchChangeEvent} />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox; ","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', border: '1px solid black', height: '600px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport Scroll from './Scroll';\r\n\r\nclass App extends React.Component {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tinputField: '',\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then((users) => this.setState({robots: users}));\r\n\t} \r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({inputField: event.target.value});\r\n\t}\r\n\r\n\trender() {\r\n\t\tlet filterRobots = this.state.robots.filter((robot) =>\r\n\t\t\trobot.name.toLowerCase().includes(this.state.inputField.toLowerCase())\r\n\t\t);\r\n\t\treturn (\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1 style={{color: 'white'}} >RoboFriends</h1>\r\n\t\t\t\t<SearchBox searchChangeEvent = {this.onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<CardList robots={filterRobots} />\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\t\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n\t<App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}